---
description: 
globs: 
alwaysApply: true
---
In general, any api serialization of a laravel model should be done so using a resource class. They should be stored in the core/app/Http/Resources directory under the appropriate domain for the resource.

If the resource is for a model and will return relationsships, or pagination, the format below should be followed for consistency.

If the resource is used to return front end options, for a select or dropdown for example, then a simpler format consisting of a uuid, label, and value may be followed.

If a resource is only returning simple data without pagination, or relationships, or computed properties, then a simple array of attributes may be returned.

Example of a Resource format:

```php
<?php

namespace App\Http\Resources\Production;

use App\Domain\Materials\Enums\UnitOfMeasureEnum;
use App\Domain\Production\Enums\RequestStatusEnum;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class MaterialRequestItemResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @return array<string, mixed>
     */
    public function toArray(Request $request): array
    {
        return [
            'uuid' => $this->uuid,
            'attributes' => $this->resource->getAttributes(),
            'relations' => [
                'material' => $this->material,
                'machine' => $this->machine,
                'status' => $this->status,
                'storage_location' => $this->storageLocation,
                'requester' => $this->requester,
                'container_allocation' => $this->containerAllocation,
            ],
            'computed' => [
                'title' => $this->getTitle(),
                'material_part_number' => $this->material->part_number,
                'material_description' => $this->material->description,
                'machine_name' => $this->machine?->name,
                'storage_location_name' => $this->storageLocation?->name,
                'status' => RequestStatusEnum::from($this->status?->code)->label(),
                'quantity_requested' => $this->quantity_requested,
                'quantity_delivered' => $this->quantity_delivered,
                'unit_of_measure' => UnitOfMeasureEnum::from($this->unit_of_measure)->label(),
                'material_tote_type_name' => $this->materialToteType?->tote,
            ]
        ];
    }

    /**
     * Return the title of the request.
     */
    protected function getTitle() : string
    {
        $locationName = $this->machine ? $this->machine->name : $this->storageLocation?->name;

        return $this->material->part_number .' to '. $locationName;
    }
}

```

Example of a Collection Format:

```php
<?php

namespace App\Http\Resources\Production;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\ResourceCollection;

class MaterialRequestListCollection extends ResourceCollection
{
    /**
     * The resource that this resource collects.
     *
     * @var string
     */
    public $collects = MaterialRequestListResource::class;

    public function setCollection($collection) {
        $this->collects = $collection;
    }

    /**
     * Transform the resource collection into an array.
     *
     * @return array<int|string, mixed>
     */
    public function toArray(Request $request): array
    {
        return [
            'data' => $this->collection->toArray(),
            'computed' => [
                'count' => $this->collection->count()
            ],
            'meta' => [
                'timestamp' => now()
            ],
        ];
    }
}
```

Front-end options Resource example:

```php
<?php

namespace App\Http\Resources\Production;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class MachineOptionResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @return array<string, mixed>
     */
    public function toArray(Request $request): array
    {
        return [
            'uuid' => $this->uuid,
            'label' => $this->name,
            'value' => $this->uuid,
        ];
    }
}

```

Example of a simple resource format:

```php
<?php

namespace App\Http\Resources\Auth;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class UserProfileResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @return array<string, mixed>
     */
    public function toArray(Request $request): array
    {
        return [
            'uuid' => $this->uuid,
            'organization_id' => $this->organization_id,
            'teammate_clock_number' => $this->teammate_clock_number,
            'domain_account_guid' => $this->domain_account_guid,
            'first_name' => $this->teammate->first_name,
            'last_name' => $this->teammate->last_name,
            'display_name' => $this->teammate->domainAccount?->display_name,
            'title' => $this->teammate->domainAccount?->title,
            'description' => $this->teammate->domainAccount?->description,
            'department' => $this->teammate->domainAccount?->department,
            'email' => $this->teammate->domainAccount?->email,
            'hire_date' => $this->teammate->hire_date,
            'created_at' => $this->created_at,
        ];
    }
}

```